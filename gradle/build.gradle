/**
 * Sources download task for Gradle 8+
 */
import java.util.stream.Collectors;

apply plugin: ResolveSourcesPlugin

public abstract class ResolveSourcesPlugin implements Plugin<Gradle> {

    private static String ENTERPRISE_REPOSITORY_URL = "https://repo.gradle.org/gradle/repo"

    @Inject
    protected abstract ObjectFactory getObjectFactory();

    void apply(Gradle gradle) {
        // ONLY USE ENTERPRISE REPO FOR DEPENDENCIES
        gradle.allprojects { project ->
            project.getPlugins().apply(JavaPlugin.class);

            Configuration runtimeClasspath = project.getConfigurations().getByName("runtimeClasspath");
            project.getTasks().register("resolveSources", ResolveDocsTask.class, task -> {
                task.setGroup("documentation");
                task.setDescription("Resolve source artifacts for all runtime dependencies");

                // Set task input and output conventions
//                ArtifactView docsView = buildDocumentationView(runtimeClasspath, DocsType.SOURCES);
                ArtifactView docsView = runtimeClasspath.getIncoming().artifactView(view -> {
                    view.setLenient(true);

                    // Uncomment me to view the new behavior
                    view.withVariantReselection();

                    AttributeContainer attributes = view.getAttributes();
                    attributes.attribute(Category.CATEGORY_ATTRIBUTE, getObjectFactory().named(Category.class, Category.DOCUMENTATION));
                    attributes.attribute(Bundling.BUNDLING_ATTRIBUTE, getObjectFactory().named(Bundling.class, Bundling.EXTERNAL));
                    attributes.attribute(DocsType.DOCS_TYPE_ATTRIBUTE, getObjectFactory().named(DocsType.class, DocsType.SOURCES));
                    attributes.attribute(Usage.USAGE_ATTRIBUTE, getObjectFactory().named(Usage.class, Usage.JAVA_RUNTIME));
                })
                task.getDocs().from(docsView.getFiles());
                task.getDestinationDir().convention(project.getLayout().getBuildDirectory().dir("sources"));

                // Always rerun this task
                task.getOutputs().upToDateWhen(e -> false);
            });
        }
    }

    /**
     * Sets up an ArtifactView based on this project's runtime classpath which will fetch documentation.
     *
     * @param graph the resolution graph to retrieve artifacts from
     * @param docsType the type of documentation artifact the returned view will fetch
     * @return ArtifactView which will fetch documentation
     */
    private ArtifactView buildDocumentationView(Configuration graph, String docsType) {
        return graph.getIncoming().artifactView(view -> {
            view.setLenient(true);

            // Uncomment me to view the new behavior
            view.withVariantReselection();

            AttributeContainer attributes = view.getAttributes();
            attributes.attribute(Category.CATEGORY_ATTRIBUTE, getObjectFactory().named(Category.class, Category.DOCUMENTATION));
            attributes.attribute(Bundling.BUNDLING_ATTRIBUTE, getObjectFactory().named(Bundling.class, Bundling.EXTERNAL));
            attributes.attribute(DocsType.DOCS_TYPE_ATTRIBUTE, getObjectFactory().named(DocsType.class, docsType));
            attributes.attribute(Usage.USAGE_ATTRIBUTE, getObjectFactory().named(Usage.class, Usage.JAVA_RUNTIME));
        })

    }
}

abstract class ResolveDocsTask extends org.gradle.api.DefaultTask {
    @OutputDirectory
    public abstract DirectoryProperty getDestinationDir();

    @InputFiles
    public abstract ConfigurableFileCollection getDocs();

    @Inject
    protected abstract FileSystemOperations getFileSystemOperations();

    @TaskAction
    public void resolveSources() {
        // Fetch the documentation from the ArtifactView, causing resolution
        Set<File> sourceFiles = getDocs().getFiles();

        // Copy them to the output folder
        getFileSystemOperations().sync(spec -> {
            spec.from(sourceFiles);
            spec.into(getDestinationDir());
        });

        // And print the result to the console
        getLogger().lifecycle("Resolved the following files: {}", sourceFiles.stream().map(File::getName).sorted().collect(Collectors.toList()));
    }
}
